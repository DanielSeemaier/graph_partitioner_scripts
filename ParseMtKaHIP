#!/bin/bash
DIR=${1:-"."}

read -d '' parser << 'EOF'
BEGIN {
    print "Graph,N,M,Seed,K,Threads,TimeLabelPropagation,TimeContraction,TimeRefinementLabelPropagation,Cut,Balance,Time,Failed"
    split("", data)
    phase = "C"
}
{
    if (match($0, /FILE=(.*?)__t([0-9]+)__k([0-9]+)__seed([0-9]+)/, m)) {  
       if (length(data) > 0) { yield(data) }
       data["graph"] = m[1] ".graph"
       data["t"] = m[2]
       data["k"] = m[3]
       data["seed"] = m[4]
       phase = "C"
    } else if (match($0, /FILE=(.*?)__t([0-9]+)__k([0-9]+)/, m)) {
       if (length(data) > 0) { yield(data) }
       data["graph"] = m[1] ".graph"
    	data["t"] = m[2]
        data["k"] = m[3]
	data["seed"] = -1
        phase = "C"
    } else if (match($0, /FILE=(.*?)__t([0-9]+)/, m)) {
       if (length(data) > 0) { yield(data) }
       data["graph"] = m[1] ".graph"
        data["t"] = m[2]
        data["k"] = 2
	data["seed"] = -1
        phase = "C"
    }
}
match($0, /time spent for partitioning\\s*([0-9\.]+)/, m) {
    data["time"] = m[1]
}
match($0, /graph has ([0-9]+) nodes and ([0-9]+) edges/, m) {
    data["n"] = m[1]
    data["m"] = m[2] 
}
match($0, /Parallel lp:\\s*iterations\\s*([0-9\.]+)/, m) {
    if (phase == "C") {
        data["timeLabelPropagation"] += m[1]
    } else {
        data["refinementTimeLabelPropagation"] += m[1]
    }
}
match($0, />> Contract\\s*([0-9\.]+)/, m) {
    if (phase == "C") {
        data["timeGraphContraction"] += m[1]
    }
}
/Parallel initial partitioning/ {
    phase = "I"
}
/Uncoarsening: Init other vectors lp.*/ {
    phase = "R"
}
match($0, /cut\\s*([0-9]+)/, m) {
    data["cut"] = m[1]
}
match($0, /balance\\s*([0-9\.]+)/, m) {
    data["balance"] = m[1]
}
END {
    if (length(data) > 0) {
        yield(data)
    }
}

function yield(data) {
    failed = length(data) != 12

    printf "%s,", data["graph"]
    printf "%d,", data["n"]
    printf "%d,", data["m"]
    printf "%d,", data["seed"]
    printf "%d,", data["k"]
    printf "%d,", data["t"]
    printf "%f,", data["timeLabelPropagation"]
    printf "%f,", data["timeGraphContraction"]
    printf "%f,", data["refinementTimeLabelPropagation"]
    printf "%d,", data["cut"]
    printf "%f,", data["balance"]
    printf "%f,", data["time"]
    printf "%d", failed
    printf "\\n"

    for (e in data) {
        delete data[e]
    }
}
EOF

gawk "$parser" <(for FILE in "$DIR"/*; do echo ""; echo "FILE=$(basename "$FILE")"; cat "$FILE"; done)

